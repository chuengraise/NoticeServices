// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// InfoDao is the manager for logic model data accessing and custom defined data operations functions management.
type InfoDao struct {
	Table   string      // Table is the underlying table name of the DAO.
	Group   string      // Group is the database configuration group name of current DAO.
	Columns InfoColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// InfoColumns defines and stores column names for table info.
type InfoColumns struct {
	Id         string //
	AppId      string //
	ConfigId   string //
	ComeFrom   string //
	Method     string //
	MsgTitle   string //
	MsgBody    string //
	MsgUrl     string //
	UserIds    string //
	PartyIds   string //
	Totag      string //
	State      string //
	CreateTime string //
	MethodCron string //
	MethodNum  string //
}

//  infoColumns holds the columns for table info.
var infoColumns = InfoColumns{
	Id:         "id",
	AppId:      "app_id",
	ConfigId:   "config_id",
	ComeFrom:   "come_from",
	Method:     "method",
	MsgTitle:   "msg_title",
	MsgBody:    "msg_body",
	MsgUrl:     "msg_url",
	UserIds:    "user_ids",
	PartyIds:   "party_ids",
	Totag:      "totag",
	State:      "state",
	CreateTime: "create_time",
	MethodCron: "method_cron",
	MethodNum:  "method_num",
}

// NewInfoDao creates and returns a new DAO object for table data access.
func NewInfoDao() *InfoDao {
	return &InfoDao{
		Group:   "default",
		Table:   "info",
		Columns: infoColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *InfoDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *InfoDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *InfoDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
