// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// JobDao is the manager for logic model data accessing and custom defined data operations functions management.
type JobDao struct {
	Table   string     // Table is the underlying table name of the DAO.
	Group   string     // Group is the database configuration group name of current DAO.
	Columns JobColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// JobColumns defines and stores column names for table job.
type JobColumns struct {
	Id             string //
	Name           string //
	Params         string //
	Group          string //
	InvokeTarget   string //
	CronExpression string //
	MisfirePolicy  string //
	Concurrent     string //
	Status         string //
	CreateTime     string //
	Remark         string //
}

//  jobColumns holds the columns for table job.
var jobColumns = JobColumns{
	Id:             "id",
	Name:           "name",
	Params:         "params",
	Group:          "group",
	InvokeTarget:   "invoke_target",
	CronExpression: "cron_expression",
	MisfirePolicy:  "misfire_policy",
	Concurrent:     "concurrent",
	Status:         "status",
	CreateTime:     "create_time",
	Remark:         "remark",
}

// NewJobDao creates and returns a new DAO object for table data access.
func NewJobDao() *JobDao {
	return &JobDao{
		Group:   "default",
		Table:   "job",
		Columns: jobColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *JobDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *JobDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *JobDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
